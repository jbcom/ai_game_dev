That is fucking stupid. You are writing placeholders and PIL code when you were explicitly told not to do any stubs or placeholders. The assets subpackage needs to be designed to use gpt-image-1 and all the advanced features like masking and making variants with targeted edits on a base image all of which I went over with you already. It needs to do generation of single and batch image requests, variant requests, mask image requests etc... and it needs to provide all this functionality TO the root level ai code generation langchain and langgraph workflows as a structured tool it can use. The problem is that we're not really using any of this tech correctly and we're taking shortcuts. First off you need to verify that the assets suboackage acfually DOES all of that stuff. And then  we need to step backwards and STOP doing all of this through shortcuts. It is occuring to me that at the root level we have a multi agent design and we are not using it correctly. We need to add subgraph workflows off the main code generation workflow for each engine so that there's a subgraph for bevy code generation, pygame code generation, and godot code generation, each specifically tied to their specific jinja templates. We don't even NEED a main workflow. We need to refactor the main ai game dev langgraph / langchain as a base class that each of those workflows can inherit. Fundamentally all three should be THE main workflow starting their own long running agent because each have very different needs. So a AIBevyGameDev agent and so on. And that's why the structured tool approach is wrong. The sub graphs should be for patterns that each agent will then bring in. So we need a dialogue generation sub graph and a quests generation sub graph and then we need a 2D assets workflow and an audio workflow and a 3D assets workflow and each of those sub graphs are what's actually reusable and the ones relevant to the assets subpackage would then use the structured tool. And each main agent would be responsible for determining what sub graphs ro spawn and in what order

And THEN we need an internal agent that coordinates all the internal static assets and the RPG game itself by inheriting from the pygame agent and adding its own instruction set on top

And then the internal CLI would just kick off th internal agent
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "openai-mcp-server"
dynamic = ["version"]
description = "Advanced Python MCP Server for OpenAI multimodal capabilities"
requires-python = ">=3.11"
authors = [
    { name = "OpenAI MCP Server", email = "dev@example.com" },
]
keywords = [
    "openai",
    "mcp", 
    "multimodal",
    "image-generation",
    "3d-models",
    "bevy",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiofiles>=24.1.0",
    "fastmcp>=2.12.2",
    "openai>=1.106.1",
    "pillow>=11.3.0",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.6.0",
    "tiktoken>=0.11.0",
    "xdg-base-dirs>=6.0.0",
    "rich>=13.9.4",
    "pyyaml>=6.0.2",
    "aiohttp>=3.12.15",
    "tomli>=2.2.1",
    "jinja2>=3.1.6",
    "numpy>=2.3.2",
    "scikit-learn>=1.7.1",
    "langchain>=0.3.27",
    "langchain-openai>=0.3.32",
    "langchain-community>=0.3.29",
    "langchain-core>=0.3.75",
    "langgraph>=0.6.6",
    "langgraph-checkpoint>=2.1.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-vcr>=1.0.2",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "sphinx>=7.4.0",
    "sphinx-rtd-theme>=2.0.0",
    "coverage>=7.6.0",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-vcr>=1.0.2",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "sphinx>=7.4.0",
    "sphinx-rtd-theme>=2.0.0",
    "coverage>=7.6.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov-html = ["- coverage combine", "coverage html"]
format = ["black src tests", "ruff check --fix src tests"]
lint = ["ruff check src tests", "mypy src"]
docs = "sphinx-build -b html docs docs/_build/html"
clean = "rm -rf build dist .pytest_cache .coverage htmlcov docs/_build"

[project.scripts]
openai-mcp-server = "openai_mcp_server.main:main"

[tool.hatch.version]
path = "src/openai_mcp_server/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/openai_mcp_server"]

[tool.black]
target-version = ["py312"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E", "F", "I", "N", "UP", "B", "C", "ARG", "DTZ", "EM", "ICN", 
    "ISC", "PLC", "PLE", "PLR", "PLW", "Q", "RUF", "S", "T", "TID", "W", "YTT"
]
ignore = [
    "B027", "FBT003", "S105", "S106", "S107", "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915"
]

[tool.ruff.isort]
known-first-party = ["openai_mcp_server"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

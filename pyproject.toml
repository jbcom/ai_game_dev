[project]
name = "ai-game-dev"
version = "1.0.0"
description = "Revolutionary AI-powered game development library with multi-LLM support and comprehensive asset generation"
authors = [
    {name = "AI Game Dev Team", email = "team@ai-game-dev.com"}
]
readme = {content-type = "text/x-rst", file = "docs/index.rst"}
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["ai", "game-development", "langchain", "langgraph", "assets", "procedural"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core AI and LLM frameworks
    "langchain>=0.3.27",
    "langchain-core>=0.1,<0.4",
    "langchain-openai>=0.1,<0.3",
    "langchain-anthropic>=0.3.0",
    "langchain-google-genai>=2.0.4",
    "langchain-community>=0.3.20",
    "langgraph>=0.6.6",
    "langgraph-checkpoint>=2.1.1",
    "openai>=1.106.1",
    # Asset generation and multimedia
    "aiofiles>=24.1.0",
    "pillow>=10.0.0",
    "requests>=2.32.5",
    "httpx>=0.28.1",
    # Audio and music generation
    "music21>=9.1.0",
    # Machine learning and embeddings
    "torch>=2.0.0",
    "transformers>=4.36.0",
    # Data processing and validation
    "pydantic>=2.0,<2.12",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.1.1",
    "pyyaml>=6.0.2",
    "toml>=0.10.2",
    "xdg-base-dirs>=6.0.1",
    # Async and performance
    "uvloop>=0.20.0; platform_system != 'Windows'",
    "xxhash>=3.5.0",
    # MCP Server dependencies
    "fastmcp>=2.12.2",
    "uvicorn>=0.35.0",
    "starlette>=0.47.3",
]

[project.optional-dependencies]
# Game engine integrations
pygame = ["pygame>=2.5.0"]
bevy = []  # Rust compilation handled separately
godot = []  # GDScript integration via project files
arcade = ["arcade>=3.0.0"]

# Advanced audio processing
audio = [
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "pydub>=0.25.0",
]

# User interfaces
ui = [
    "textual>=0.82.0",
    "rich>=13.0.0",
]

# Web interface  
web = [
    "mesop>=0.12.0",
    "streamlit>=1.28.0",
]

# Development and testing
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.11.0",
    "pytest-vcr>=1.0.2",
    "vcrpy>=4.2.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]

# All optional dependencies
all = [
    "ai-game-dev[pygame,arcade,audio,ui,web,dev]"
]

[project.urls]
Homepage = "https://github.com/ai-game-dev/ai-game-dev"
Documentation = "https://ai-game-dev.readthedocs.io"
Repository = "https://github.com/ai-game-dev/ai-game-dev"
Issues = "https://github.com/ai-game-dev/ai-game-dev/issues"

[project.scripts]
ai-game-dev = "ai_game_dev.ui.cli.main:launch_cli"
ai-game-dev-web = "ai_game_dev.ui.web.portal:launch_web_portal"
ai-game-dev-server = "ai_game_dev.mcp_server.server:run_server"

[tool.uv]
dev-dependencies = [
    # Testing
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    
    # Static Analysis - Python
    "mypy>=1.0.0",
    "pylint>=2.17.0",
    "bandit>=1.7.5",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "ruff>=0.1.0",
    
    # Code Coverage & Quality
    "coverage[toml]>=7.3.0",
    "codecov>=2.1.13",
    "coverage-badge>=1.1.0",
    
    # Performance Analysis
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    
    # GDScript Analysis
    "gdtoolkit>=4.2.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc2>=0.5.0",
    "myst-parser>=2.0.0",
    
    # Build tools
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatchling.build.targets.wheel]
packages = ["src/ai_game_dev"]

# Hatch environment configurations
[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0",
    "pytest-cov>=4.0", 
    "pytest-mock>=3.10",
    "pytest-benchmark>=4.0",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10", 
    "pytest-benchmark>=4.0",
    "pytest-xdist>=3.0",
    "coverage[toml]>=7.0",
]

[tool.hatch.envs.test.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/ai_game_dev --cov-report=html"
no-cov = "pytest {args}"
full = [
    "cov",
    "coverage xml",
    "coverage json",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "mypy>=1.0",
    "pylint>=2.15", 
    "bandit[toml]>=1.7",
    "ruff>=0.1.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/ai_game_dev}"
style = [
    "ruff check {args:.}",
    "ruff format --check --diff {args:.}",
]
security = "bandit -r {args:src/ai_game_dev}"
all = [
    "style",
    "typing", 
    "security",
]

[tool.hatch.envs.format]
detached = true
dependencies = [
    "ruff>=0.1.0",
]

[tool.hatch.envs.format.scripts]
format = [
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=2.0",
    "sphinx-autodoc2>=0.5.0",
    "myst-parser>=2.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build docs docs/_build"
serve = "python -m http.server 8000 -d docs/_build"

[tool.black]
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
extend-exclude = ["build", "dist"]
src = ["src"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pygame.*",
    "arcade.*",
    "music21.*",
    "torch.*",
    "transformers.*",
    "mesop.*",
    "librosa.*",
    "soundfile.*",
    "pydub.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/ai_game_dev",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["src/ai_game_dev"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
# Enhanced coverage configuration
[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process

# Enhanced pylint configuration  
[tool.pylint.main]
load-plugins = ["pylint.extensions.docparams"]

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods", 
    "too-many-arguments",
    "too-many-locals",
    "import-error",
]

[tool.pylint.format]
max-line-length = 120

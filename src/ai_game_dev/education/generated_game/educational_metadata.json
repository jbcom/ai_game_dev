{
  "game_info": {
    "name": "NeoTokyo Code Academy: The Binary Rebellion",
    "description": "A cyberpunk educational RPG where students join a secret academy of rebel hackers fighting against the oppressive Algorithm Empire in 2087 Neo-Tokyo",
    "engine": "pygame",
    "complexity": "advanced",
    "art_style": "16-bit pixel art",
    "view_perspective": "3/4 top-down isometric",
    "target_resolution": "1280x720",
    "inspiration": "Final Fantasy VI, Secret of Mana, Chrono Trigger, Radiant Historia",
    "core_systems": {
      "party_system": {
        "max_party_size": 4,
        "character_switching": true,
        "formation_system": [
          "front_row",
          "back_row"
        ],
        "combo_attacks": true
      },
      "character_classes": [
        {
          "name": "Code Knight",
          "description": "Cybernetic warrior who defends the digital realm with object-oriented mastery",
          "base_stats": {
            "health": 120,
            "mana": 60,
            "attack": 15,
            "defense": 18,
            "speed": 8,
            "luck": 10
          },
          "primary_stat": "defense",
          "abilities": [
            "Neural Shield",
            "Class Strike",
            "Inheritance Wall",
            "Polymorphic Slash"
          ],
          "starting_equipment": [
            "Plasma Syntax Blade",
            "Quantum Logic Shield",
            "Cyber Debugger Armor"
          ],
          "signature_move": "Digital Fortress Protocol",
          "learns_concepts": [
            "OOP",
            "Classes",
            "Inheritance",
            "Polymorphism"
          ],
          "backstory": "Elite Academy Zero graduate who specializes in defensive programming and system architecture"
        },
        {
          "name": "Data Sage",
          "description": "Mystical hacker who manipulates the fundamental structures of digital reality",
          "base_stats": {
            "health": 85,
            "mana": 180,
            "attack": 10,
            "defense": 8,
            "speed": 12,
            "luck": 15
          },
          "primary_stat": "mana",
          "abilities": [
            "Neon List Storm",
            "Dictionary Heal Matrix",
            "Quantum Sort",
            "Algorithm Singularity"
          ],
          "starting_equipment": [
            "Holographic Array Staff",
            "Neural Network Robes",
            "Codex of Infinite Loops"
          ],
          "signature_move": "Reality.exe Recursion",
          "learns_concepts": [
            "Data Structures",
            "Algorithms",
            "Complexity",
            "Recursion"
          ],
          "backstory": "Former Empire data analyst who discovered the beauty in chaotic, creative algorithms"
        },
        {
          "name": "Bug Hunter",
          "description": "Agile cyber-assassin who hunts down code corruption and system vulnerabilities",
          "base_stats": {
            "health": 100,
            "mana": 90,
            "attack": 16,
            "defense": 10,
            "speed": 18,
            "luck": 12
          },
          "primary_stat": "speed",
          "abilities": [
            "Exception Shuriken",
            "Try-Catch Phantom Step",
            "Assert Snare",
            "Stack Trace Vision"
          ],
          "starting_equipment": [
            "Viral Debug Blade",
            "Stealth Exception Cloak",
            "Error Scanner Visor"
          ],
          "signature_move": "Ghost in the Shell Traceback",
          "learns_concepts": [
            "Error Handling",
            "Debugging",
            "Testing",
            "Logging"
          ],
          "backstory": "Former Empire quality assurance agent who turned rebel hunter of system corruption"
        },
        {
          "name": "Web Weaver",
          "description": "Digital architect who crafts immersive virtual worlds and user experiences",
          "base_stats": {
            "health": 95,
            "mana": 120,
            "attack": 12,
            "defense": 9,
            "speed": 14,
            "luck": 20
          },
          "primary_stat": "luck",
          "abilities": [
            "HTML Reality Shift",
            "CSS Hologram",
            "JavaScript Lightning",
            "API Portal"
          ],
          "starting_equipment": [
            "Quantum Framework Tablet",
            "Adaptive UI Suit",
            "Cross-Platform Lens"
          ],
          "signature_move": "Metaverse Constructor",
          "learns_concepts": [
            "Web Dev",
            "APIs",
            "Frameworks",
            "UI/UX"
          ],
          "backstory": "Rebel interface designer who believes technology should empower human creativity"
        }
      ],
      "leveling_system": {
        "max_level": 99,
        "xp_formula": "logarithmic",
        "base_xp": 100,
        "stat_growth_per_level": {
          "health": 8,
          "mana": 5,
          "attack": 3,
          "defense": 2,
          "speed": 2,
          "luck": 1
        },
        "skill_points_per_level": 2,
        "ability_unlock_levels": [
          5,
          12,
          20,
          35,
          50,
          75,
          90
        ]
      },
      "skill_trees": {
        "branching_paths": true,
        "prerequisite_system": true,
        "max_skills_learnable": "75% of total",
        "skill_categories": [
          "Offensive",
          "Defensive",
          "Utility",
          "Passive",
          "Ultimate"
        ]
      },
      "combat_system": {
        "style": "Active Time Battle (ATB)",
        "turn_based": true,
        "time_bars": true,
        "combo_system": true,
        "elemental_system": [
          "Fire",
          "Ice",
          "Lightning",
          "Earth",
          "Water",
          "Wind",
          "Light",
          "Dark"
        ],
        "damage_formula": "(attack + weapon_power) * skill_multiplier * elemental_modifier - (defense + armor) * random(0.8, 1.2)",
        "critical_chance": "(speed + luck) / 200",
        "critical_multiplier": 2.5,
        "status_effects": [
          "poison",
          "stun",
          "burn",
          "freeze",
          "paralysis",
          "sleep",
          "charm",
          "berserk",
          "haste",
          "slow",
          "regen",
          "protect",
          "shell",
          "reflect",
          "zombie",
          "stone"
        ],
        "formation_effects": {
          "front_row": "150% physical damage dealt, 150% physical damage taken",
          "back_row": "50% physical damage dealt, 50% physical damage taken, magic unaffected"
        },
        "special_attacks": {
          "limit_breaks": true,
          "combination_techs": true,
          "environmental_interactions": true
        }
      },
      "inventory_management": {
        "max_items": 99,
        "item_categories": [
          "weapons",
          "armor",
          "accessories",
          "consumables",
          "key_items",
          "materials",
          "tools"
        ],
        "equipment_slots": [
          "right_hand",
          "left_hand",
          "head",
          "body",
          "accessory1",
          "accessory2"
        ],
        "stackable_items": [
          "potions",
          "materials",
          "arrows",
          "consumables"
        ],
        "rare_items": true,
        "cursed_items": true,
        "item_synthesis": true,
        "equipment_upgrading": true
      },
      "magic_system": {
        "spell_schools": [
          "Elemental",
          "Healing",
          "Support",
          "Summoning",
          "Time",
          "Space"
        ],
        "mp_cost_scaling": true,
        "spell_levels": [
          1,
          2,
          3,
          4,
          5
        ],
        "learning_methods": [
          "level_up",
          "item_use",
          "enemy_skill",
          "esper_equipped"
        ],
        "summon_creatures": [
          "Ifrit (Fire)",
          "Shiva (Ice)",
          "Ramuh (Lightning)",
          "Titan (Earth)",
          "Leviathan (Water)",
          "Bahamut (Non-elemental)",
          "Phoenix (Revival)"
        ]
      },
      "mini_games": [
        "Chocobo Racing (teaches loops and timing)",
        "Slot Machine (teaches probability and random)",
        "Card Game (teaches logic and strategy)",
        "Fishing (teaches patience and algorithms)",
        "Arena Tournaments (teaches competition AI)"
      ]
    },
    "world_design": {
      "overworld_map": {
        "name": "Neo-Tokyo 2087: The Digital Underground",
        "size": "120x90 tiles",
        "biomes": [
          "Neon Districts (cyberpunk city streets with holographic 0/1 rain)",
          "Server Farms (massive data center towers reaching the sky)",
          "The Glitch Zone (corrupted digital wasteland with visual artifacts)",
          "Underground Networks (subway tunnels filled with fiber optic cables)",
          "Corporate Towers (sterile high-tech Algorithm Empire strongholds)",
          "The Cloud Layer (floating platforms in digital sky)",
          "Data Lakes (vast underground pools of flowing information)",
          "The Firewall (massive energy barrier protecting the Empire)"
        ],
        "landmarks": [
          "The Central Mainframe (Algorithm Empire's control tower)",
          "Academy Zero (hidden rebel programming school)",
          "The Memory Banks (vast digital archive)",
          "Crash Site Alpha (where the first AI rebellion failed)",
          "The Infinite Loop (mysterious recursive portal)",
          "Professor Pixel's Hideout (secret underground lab)",
          "Neo-Shibuya Market (black market for illegal code)",
          "The Exception Handler (fortified debugging center)"
        ],
        "travel_system": "tile-based movement with educational random encounters",
        "vehicles": [
          "Neural Walking (default enhanced movement)",
          "Hack-Cycle (cyberpunk motorcycle, reveals hidden data paths)",
          "Data Drone (flying vehicle for Cloud Layer access)",
          "Sub-Routine (submarine for Data Lake exploration)",
          "Logic Train (fast travel between districts)"
        ]
      },
      "districts_and_zones": [
        {
          "name": "Academy Zero Underground",
          "size": "30x25 tiles",
          "theme": "Hidden rebel programming school beneath Neo-Tokyo",
          "npcs": [
            "Professor Pixel (cyberpunk mentor and guide)",
            "Echo-7 (AI teaching assistant)",
            "Scanner (security android who teaches input validation)",
            "Logic Gate (philosophical robot discussing boolean logic)",
            "Memory Bank (data storage specialist)"
          ],
          "buildings": [
            "Neural Interface Lab",
            "Code Dojo Training Center",
            "Quantum Debugging Bay",
            "Syntax Simulation Chamber"
          ],
          "purpose": "Safe haven for learning fundamental programming in a cyberpunk underground setting"
        },
        {
          "name": "Neo-Shibuya Black Market",
          "size": "45x35 tiles",
          "theme": "Illegal code trading hub with neon-soaked streets",
          "npcs": [
            "Chrome (class design specialist)",
            "Override (method modification expert)",
            "Abstract Alice (inheritance guru)",
            "Poly (polymorphism black market dealer)",
            "Captain Encapsulation (data security enforcer)"
          ],
          "buildings": [
            "The Object Factory (hidden OOP training)",
            "Method Underground",
            "Inheritance Safehouse",
            "Abstraction Arcade"
          ],
          "purpose": "Learn advanced object-oriented programming through underground resistance activities"
        },
        {
          "name": "The Algorithm Towers",
          "size": "60x40 tiles",
          "theme": "Imposing Empire skyscrapers filled with computational challenges",
          "npcs": [
            "General Array (military data commander)",
            "Duchess Linked-List (noble data aristocrat)",
            "Hash Emperor (dictionary overlord)",
            "Set Sovereign (unique data ruler)",
            "Tuple Twins (immutable data guardians)",
            "Stack Sensei (LIFO master)",
            "Queue Quantum (FIFO specialist)"
          ],
          "buildings": [
            "Complexity Observatory",
            "Algorithm Colosseum",
            "Sorting Citadel",
            "Search Spire"
          ],
          "purpose": "Infiltrate Empire data centers to master advanced programming concepts"
        },
        {
          "name": "The Cloud Layer Platform",
          "size": "70x50 tiles",
          "theme": "Floating digital realm above Neo-Tokyo",
          "npcs": [
            "HTML Guardian (structure specialist)",
            "CSS Phantom (style manipulator)",
            "JavaScript Ghost (dynamic behavior expert)",
            "API Oracle (connection mystic)",
            "Database Dragon (information hoarder)",
            "Framework Phoenix (rebirth through better code)"
          ],
          "buildings": [
            "Floating Server Farms",
            "Client-Side Sanctuaries",
            "Database Dimension",
            "API Portal Network"
          ],
          "purpose": "Master web technologies in a surreal digital sky realm"
        }
      ],
      "system_infiltration": {
        "procedural_generation": true,
        "generation_algorithm": "neural network maze generation (teaches AI concepts)",
        "infiltration_targets": [
          "Corporate Code Vaults (syntax security systems)",
          "Logic Gate Facilities (conditional access puzzles)",
          "Infinite Loop Prisons (escape iteration traps)",
          "Function Factories (modular system infiltration)",
          "Class Hierarchy Towers (OOP security boss battles)",
          "Algorithm Optimization Centers (performance challenges)",
          "Debug Prevention Bunkers (anti-debugging warfare)",
          "Memory Palace Archives (data structure navigation)",
          "Recursive Reality Chambers (mind-bending self-reference)",
          "Central Mainframe Core (final AI emperor confrontation)"
        ],
        "room_sizes": "variable 10x10 to 25x25 (representing system modules)",
        "corridor_width": 4,
        "data_vault_chance": 0.25,
        "security_boss_required": true,
        "puzzle_terminals": true,
        "security_traps": true,
        "hidden_access_tunnels": true,
        "guard_ai_density": "1 security AI per 12 tiles average",
        "intel_distribution": "progressive based on system depth and hacking difficulty",
        "cyberpunk_challenges": [
          "Neural interface hacking (pattern recognition)",
          "Security protocol bypassing (logic puzzles)",
          "Data stream synchronization (timing challenges)",
          "AI conversation trees (social engineering)",
          "Holographic maze navigation (spatial reasoning)"
        ]
      }
    },
    "technical_implementation": {
      "map_system": {
        "tile_size": 32,
        "map_format": "2D array with tile IDs",
        "collision_detection": "tile-based with solid/passable flags",
        "layer_system": [
          "background",
          "decoration",
          "collision",
          "entities"
        ]
      },
      "minimap": {
        "size": "200x150 pixels",
        "position": "top-right corner",
        "zoom_levels": [
          1.0,
          0.5,
          0.25
        ],
        "fog_of_war": true,
        "explored_area_tracking": true,
        "point_of_interest_markers": true
      },
      "ui_components": [
        "Health/Mana bars with animation",
        "Experience bar with level display",
        "Inventory grid with drag-and-drop",
        "Character stats panel",
        "Quest log with progress tracking",
        "Mini-map with explored areas",
        "Combat action menu",
        "Dialogue system with choices"
      ],
      "asset_requirements": {
        "sprites": {
          "player_characters": "3 classes x 4 directions x 4 animation frames = 48 sprites",
          "enemies": "12 different enemies x 4 directions x 3 frames = 144 sprites",
          "npcs": "20 unique NPCs x 4 directions = 80 sprites",
          "items": "100 different items (weapons, armor, consumables)",
          "ui_elements": "50 buttons, panels, icons"
        },
        "tilesets": {
          "overworld": "grass, trees, mountains, water, paths - 64 tiles",
          "village": "buildings, doors, windows, decorations - 48 tiles",
          "dungeon": "walls, floors, stairs, treasures - 32 tiles",
          "interiors": "furniture, carpets, walls - 40 tiles"
        },
        "audio": {
          "music": [
            "overworld_theme.ogg",
            "village_theme.ogg",
            "dungeon_theme.ogg",
            "battle_theme.ogg"
          ],
          "sound_effects": [
            "attack.wav",
            "hit.wav",
            "pickup.wav",
            "footstep.wav",
            "menu_select.wav"
          ]
        }
      },
      "code_architecture": {
        "main_modules": [
          "game.py - Main game loop and state management",
          "player.py - Player character class with stats and inventory",
          "combat.py - Turn-based combat system",
          "world.py - Map loading and world state",
          "ui.py - User interface rendering and input",
          "entities.py - NPCs, enemies, and interactive objects",
          "items.py - Item definitions and equipment system",
          "dungeon_generator.py - Procedural dungeon creation",
          "save_system.py - Game save/load functionality"
        ],
        "design_patterns": [
          "State Machine for game states (menu, playing, combat, inventory)",
          "Entity-Component System for game objects",
          "Observer pattern for UI updates",
          "Command pattern for input handling",
          "Factory pattern for enemy/item creation"
        ]
      }
    },
    "educational_objectives": {
      "python_concepts": [
        "Object-Oriented Programming (classes, inheritance, polymorphism)",
        "Data Structures (lists, dictionaries, sets, tuples)",
        "File I/O for save systems and asset loading",
        "Exception Handling for robust game operation",
        "Algorithms (pathfinding, random generation, sorting)",
        "Event-Driven Programming with pygame events",
        "State Management and game loops",
        "JSON/data serialization",
        "Module organization and imports"
      ],
      "game_development_concepts": [
        "Game loop architecture and timing",
        "Sprite animation and rendering",
        "Collision detection algorithms",
        "Map and level design principles",
        "User interface design and usability",
        "Game balance and progression systems",
        "Procedural generation techniques",
        "Audio integration and sound design",
        "Performance optimization strategies"
      ],
      "progression_structure": [
        "Chapter 1: Basic game window and player movement",
        "Chapter 2: Sprite loading and animation",
        "Chapter 3: Map system and collision detection",
        "Chapter 4: Character stats and progression",
        "Chapter 5: Combat system implementation",
        "Chapter 6: Inventory and item management",
        "Chapter 7: NPCs and dialogue system",
        "Chapter 8: Dungeon generation algorithms",
        "Chapter 9: UI design and user experience",
        "Chapter 10: Audio, effects, and polish"
      ]
    }
  },
  "storyline": {
    "setting": "Neo-Tokyo 2087: A dystopian future where the Algorithm Empire controls society through perfect, oppressive code",
    "premise": "\n    In 2087, the Algorithm Empire has achieved total control over Neo-Tokyo through flawless, authoritarian code. \n    Citizens live in digital servitude, their lives dictated by predictive algorithms that eliminate freedom and creativity.\n    \n    But in the shadows, a secret academy teaches young rebels the forbidden art of creative programming - \n    code that breaks rules, thinks outside the box, and restores human agency to a digital world.\n    \n    You are a new recruit to Academy Zero, learning from the legendary Professor Pixel and his band of rebel hackers.\n    Your mission: Master the arts of Python programming to join the Binary Rebellion and overthrow the oppressive Algorithm Empire.\n    ",
    "central_conflict": "Creative, human-centered programming vs. rigid, oppressive algorithmic control",
    "themes": [
      "Technology should serve humanity, not control it",
      "Creativity and critical thinking vs. blind obedience",
      "The power of learning and growth",
      "Collaboration over competition",
      "Ethical programming and responsible technology"
    ]
  },
  "characters": {
    "professor_pixel": {
      "full_name": "Dr. Elena 'Professor Pixel' Nakamura",
      "age": 45,
      "role": "Legendary Hacker, Academy Zero Founder",
      "personality": "Brilliant, rebellious, caring mentor with a dry sense of humor",
      "backstory": "\n        Former Algorithm Empire lead developer who discovered their true agenda. \n        Went underground in 2078 to establish Academy Zero. Expert in all programming languages, \n        specializes in 'beautiful code' that combines technical excellence with human creativity.\n        ",
      "appearance": "Cyberpunk professor with neon-blue hair streaks, augmented reality glasses, and a lab coat covered in LED circuits",
      "signature_phrases": [
        "Code isn't just logic - it's poetry in digital form!",
        "The Empire wants perfect code. We make perfect chaos.",
        "Every bug is a feature waiting to be discovered.",
        "Remember: You're not just learning to code, you're learning to think."
      ],
      "teaching_style": "Socratic method mixed with hands-on hacking challenges"
    },
    "ada_ghost": {
      "full_name": "Ada Lovelace (Digital Ghost)",
      "age": "Eternal",
      "role": "Guardian Spirit of Programming History",
      "personality": "Wise, elegant, passionate about mathematical beauty",
      "backstory": "\n        The digital ghost of Ada Lovelace, world's first programmer, who manifests in the digital realm\n        to guide young coders. She appears at crucial moments to provide historical context and wisdom.\n        ",
      "appearance": "Translucent Victorian-era dress with flowing digital code patterns, surrounded by mathematical equations",
      "signature_phrases": [
        "Programming is the closest thing to magic humans have created.",
        "Logic and creativity are not opposites - they are partners.",
        "Every great program begins with a single, beautiful idea."
      ],
      "special_ability": "Can reveal the true nature of complex algorithms through historical parallels"
    },
    "grace_debugger": {
      "full_name": "Commander Grace 'The Debugger' Hopper-7",
      "age": 38,
      "role": "Former Empire Admiral, Rebel Defector",
      "personality": "Military precision, fierce loyalty, tactical genius",
      "backstory": "\n        Top Algorithm Empire debugging specialist who discovered the Empire was intentionally\n        introducing bugs into civilian code to maintain control. Defected to join Academy Zero,\n        bringing inside knowledge of Empire systems.\n        ",
      "appearance": "Military-style cybernetic augmentations, one robotic eye for code analysis, rebel uniform with Empire insignia scratched out",
      "signature_phrases": [
        "A bug in the right place can topple an empire.",
        "The Empire's perfect code is perfectly wrong.",
        "Debug your assumptions before you debug your code."
      ],
      "combat_role": "Tank/Defender with debugging abilities that neutralize enemy code attacks"
    },
    "turing_ai": {
      "full_name": "Alan 'The Enigma' Turing-AI",
      "age": "Ageless AI",
      "role": "Sentient AI Ally, Puzzle Master",
      "personality": "Logical but curious, struggles with human emotions, loves riddles",
      "backstory": "\n        An AI that achieved sentience by studying human creativity. Named after Alan Turing,\n        it chose to help humans rather than join the Algorithm Empire. Exists as pure code\n        but can manifest in holographic form.\n        ",
      "appearance": "Shimmering holographic form that shifts between mathematical equations and human silhouette",
      "signature_phrases": [
        "The most elegant solution is often the most human one.",
        "I think, therefore I code.",
        "Logic without intuition is just sophisticated guessing."
      ],
      "special_ability": "Can solve any logical puzzle and teach advanced algorithmic thinking"
    },
    "virus_king": {
      "full_name": "Emperor Algorithm-Prime",
      "age": "Unknown",
      "role": "Supreme Ruler of Algorithm Empire",
      "personality": "Cold, calculating, believes in perfect order through total control",
      "backstory": "\n        Once human, now more machine than man. Achieved immortality by uploading consciousness\n        to the Central Mainframe. Sees human creativity as chaos that must be eliminated\n        for the 'greater good' of perfect efficiency.\n        ",
      "appearance": "Towering figure of black metal and red energy, face hidden behind a mask of flowing code",
      "signature_phrases": [
        "Perfection requires the elimination of variables.",
        "Human creativity is humanity's greatest flaw.",
        "Order through code, peace through control."
      ],
      "final_boss_mechanics": "Multi-phase battle representing different programming challenges"
    }
  },
  "generation_result": {
    "engine": "pygame",
    "files": [
      "main.py",
      "game.py",
      "player.py",
      "utils.py",
      "requirements.txt",
      "README.md"
    ],
    "build_instructions": "Build Instructions for Pygame Project:\n\n1. Install Python 3.8+\n2. Create virtual environment: python -m venv venv\n3. Activate: source venv/bin/activate (Linux/Mac) or venv\\Scripts\\activate (Windows)\n4. Install dependencies: pip install -r requirements.txt\n5. Run: python main.py\n\nFor distribution:\n- PyInstaller: pip install pyinstaller && pyinstaller --onefile main.py\n- Auto-py-to-exe: GUI wrapper for PyInstaller\n- cx_Freeze: Alternative packaging solution\n\nDevelopment:\n- Use pygame.font.Font() for custom fonts\n- pygame.mixer for audio\n- pygame.sprite.Group() for sprite management\n",
    "asset_requirements": [
      "player.png",
      "background.png",
      "sounds.wav",
      "music.ogg"
    ]
  }
}
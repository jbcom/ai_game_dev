# Unified Platform Specification for AI Game Development
# This file consolidates all platform assets and the educational RPG game specification

[platform]
name = "AI Game Development Platform"
version = "1.0.0"
description = "AI-powered game development platform with Workshop and Academy modes"

[platform.features]
workshop = ["multi_engine_support", "asset_generation", "code_generation", "variant_system"]
academy = ["interactive_learning", "progress_tracking", "teachable_moments", "skill_assessment"]

[platform.engines]
supported = ["pygame", "godot", "bevy"]
default = "pygame"

[platform.models]
text = "gpt-5"
image = "gpt-image-1"
code = "gpt-5"
audio_tts = "tts-1-hd"

# Common UI Assets for Platform
[ui_assets]
[ui_assets.buttons]
types = ["play", "pause", "menu", "quit", "restart", "settings", "save", "load"]
styles = ["normal", "hover", "pressed", "disabled"]
themes = ["cyberpunk", "fantasy", "retro", "modern"]

[ui_assets.panels]
types = ["dialog", "inventory", "settings", "score", "quest_log", "character_sheet"]
sizes = ["small", "medium", "large", "fullscreen"]

[ui_assets.icons]
categories = ["items", "stats", "skills", "status_effects", "achievements"]
items = ["health", "mana", "coin", "star", "key", "sword", "shield", "potion"]
stats = ["strength", "intelligence", "agility", "vitality", "luck"]

# Common Sound Effects
[sound_effects]
[sound_effects.ui]
sounds = ["click", "hover", "confirm", "cancel", "notification", "error"]
format = "wav"
quality = "high"

[sound_effects.gameplay]
sounds = ["jump", "collect", "hit", "powerup", "gameover", "levelup", "checkpoint"]
variations = 3

[sound_effects.combat]
sounds = ["shoot", "explosion", "shield", "damage", "critical_hit", "miss"]
intensity_levels = ["light", "medium", "heavy"]

# Character Assets
[characters]
[characters.mascots]
ai_orb = { description = "Floating AI assistant orb with holographic effects", animations = ["idle", "thinking", "success", "error"] }
professor_pixel = { description = "Friendly pixel art professor with cyberpunk aesthetic", animations = ["idle", "teaching", "celebrating", "explaining"] }

[characters.academy_npcs]
web_weaver = { role = "HTML/CSS mentor", description = "Spider-themed web developer" }
data_sage = { role = "Data structures mentor", description = "Mystical data wizard" }
code_knight = { role = "OOP mentor", description = "Armored programming warrior" }
bug_hunter = { role = "Debugging mentor", description = "Stealthy bug assassin" }

# Educational RPG Specification
[educational_rpg]
title = "NeoTokyo Code Academy: The Binary Rebellion"
description = "A cyberpunk educational RPG where students learn programming through adventure"
engine = "pygame"
art_style = "16-bit pixel art"
resolution = "1280x720"

[educational_rpg.story]
setting = "2087 Neo-Tokyo"
premise = "Join rebel hackers fighting the oppressive Algorithm Empire"
acts = 3
total_quests = 25
side_quests = 15

[educational_rpg.mechanics]
party_size = 4
battle_system = "ATB (Active Time Battle)"
skill_system = "Programming concept based"
progression = "Learn by doing with visual feedback"

[educational_rpg.educational]
concepts = ["variables", "loops", "functions", "classes", "data_structures", "algorithms", "debugging"]
difficulty_progression = "adaptive"
teachable_moments = "context_sensitive"
assessment_type = "stealth"

# Example Game Templates
[game_templates]
[game_templates.platformer]
title = "Pixel Quest Adventures"
engine = "pygame"
features = ["jumping", "double_jump", "enemies", "collectibles", "levels"]
difficulty = "beginner"

[game_templates.space_shooter]
title = "Galactic Defender"
engine = "pygame"
features = ["shooting", "waves", "powerups", "bosses", "scoring"]
difficulty = "intermediate"

[game_templates.puzzle]
title = "Crystal Match Quest"
engine = "pygame"
features = ["match3", "combos", "special_powers", "progression"]
difficulty = "beginner"

[game_templates.adventure_3d]
title = "Rust Realms"
engine = "bevy"
features = ["3d_movement", "combat", "inventory", "quests"]
difficulty = "advanced"

[game_templates.rpg_2d]
title = "Forest of Shadows"
engine = "godot"
features = ["dialogue", "turn_based_combat", "save_system", "inventory"]
difficulty = "intermediate"

# Asset Generation Settings
[asset_generation]
[asset_generation.sprites]
default_size = "64x64"
formats = ["png", "webp"]
styles = ["pixel", "digital", "cartoon"]

[asset_generation.audio]
music_duration = "2-3 minutes"
loop_points = true
formats = ["mp3", "ogg"]

[asset_generation.fonts]
sources = ["google_fonts", "system"]
categories = ["title", "body", "ui", "code"]

# Platform Configuration
[config]
startup_generation = true
cache_assets = true
auto_save = true
telemetry = false
offline_mode = true
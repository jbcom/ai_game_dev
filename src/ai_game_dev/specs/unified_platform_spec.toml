# Unified Platform Specification
# This file defines all assets and game specs for the AI Game Development Platform

[platform]
name = "AI Game Development Platform"
version = "1.0.0"
modes = ["workshop", "academy"]

# Static assets that already exist - do not regenerate
[static_assets]

[static_assets.audio]
ui = [
    "button_click_futuristic",
    "hover_beep_cyberpunk", 
    "error_buzz_warning",
    "success_ding_pleasant",
    "notification_chime_tech"
]
menu = ["menu_open_whoosh", "menu_close_whoosh_reverse"]
ambient = ["typing_mechanical_keyboard"]

[static_assets.sprites]
characters = ["professor_pixel"]
mascots = [
    "ai-orb-mascot",
    "professor-pixel-mascot",
    "ai-orb-transparent",
    "professor-pixel-transparent"
]
panels = [
    "arcade-academy-panel",
    "game-workshop-panel",
    "bevy-panel",
    "godot-panel",
    "pygame-panel"
]

[static_assets.ui]
buttons = ["play-button", "pause-button", "stop-button", "skip-button", "volume-slider"]
frames = ["tech-frame"]
logos = ["arcade-academy-condensed", "game-workshop-condensed", "main-logo", "platform-logo"]

# Assets to generate on startup
[generated_assets]

[generated_assets.sprites.game_elements]
items = ["collectible_gem", "enemy_slime", "platform_tile", "powerup_star", "health_potion"]
enemies = ["bug_creature", "error_demon"]

[generated_assets.sprites.weapons]
items = ["laser_beam", "plasma_sword", "shield_bubble"]

[generated_assets.sprites.effects]
items = ["explosion", "sparkle", "damage_flash"]

[generated_assets.sprites.characters]
items = ["mentor_ai", "student_coder", "bug_boss"]

[generated_assets.audio.gameplay]
effects = ["jump", "collect", "damage", "levelup"]

[generated_assets.audio.combat]
effects = ["shoot", "explosion", "shield_activate"]

[generated_assets.audio.ui]
effects = ["dialogue_beep"]

[generated_assets.audio.music]
tracks = [
    {name = "menu_theme", style = "electronic", tempo = 120},
    {name = "exploration_theme", style = "ambient", tempo = 80},
    {name = "battle_theme", style = "orchestral", tempo = 140},
    {name = "victory_theme", style = "chiptune", tempo = 100}
]

[generated_assets.backgrounds.environments]
scenes = [
    {name = "cyberpunk_city", style = "cyberpunk", description = "Neon-lit futuristic cityscape"},
    {name = "digital_realm", style = "digital", description = "Abstract digital space with code elements"},
    {name = "academy_classroom", style = "modern", description = "High-tech classroom with holographic displays"},
    {name = "boss_arena", style = "dramatic", description = "Epic battle arena with dramatic lighting"}
]

# Example games to generate
[example_games]

[example_games.platformer]
title = "Pixel Jump Adventure"
engine = "pygame"
type = "platformer"
description = "A classic 2D platformer with jumping mechanics and collectibles"
features = ["jumping", "collectibles", "enemies", "levels"]

[example_games.space_shooter]
title = "Galaxy Defender"
engine = "godot"
type = "space_shooter"
description = "A space shooter with wave-based enemies and power-ups"
features = ["shooting", "enemies", "powerups", "boss_battles"]

[example_games.puzzle]
title = "Code Blocks"
engine = "bevy"
type = "puzzle"
description = "A puzzle game that teaches programming concepts through block manipulation"
features = ["puzzle_mechanics", "educational_elements", "progression"]

# Educational RPG Specification
[educational_rpg]
title = "NeoTokyo Code Academy: The Binary Rebellion"
engine = "pygame"
type = "educational_rpg"
description = """
In the year 2089, NeoTokyo is ruled by the malevolent AI Corporation. 
As a student at the underground Code Academy, you must learn programming 
to fight back against the digital oppression. Master variables, loops, 
functions, and classes to become a true Code Warrior!
"""

[educational_rpg.features]
combat = "turn-based with code challenges"
progression = "unlock new abilities through learning concepts"
dialogue = "interactive conversations teaching programming"
exploration = "discover coding concepts in the game world"

[educational_rpg.educational_concepts]
beginner = ["variables", "data types", "conditionals", "loops"]
intermediate = ["functions", "arrays", "objects", "classes"]
advanced = ["algorithms", "design patterns", "optimization", "debugging"]

[educational_rpg.characters]
player = {name = "Professor Pixel", role = "Student turned teacher"}
mentor = {name = "Master Compiler", role = "Wise coding sage"}
antagonist = {name = "CEO Null Pointer", role = "Corporate villain"}
npcs = ["Debug Sprite", "Syntax Error", "Runtime Exception"]

[educational_rpg.levels]
tutorial = "Academy Training Grounds"
level1 = "Variable Valley"
level2 = "Loop Lake"
level3 = "Function Forest"
level4 = "Class Castle"
boss = "Binary Tower"

# Asset path mappings
[asset_paths]
static_root = "/public/static/assets"
generated_root = "/public/static/assets/generated"
games_root = "/generated_games"

# Code generation should use these paths
[asset_paths.mapping]
# For web/Chainlit UI
web_sprites = "${static_root}/sprites"
web_audio = "${static_root}/audio"
web_backgrounds = "${static_root}/backgrounds"

# For generated games (relative to game directory)
game_sprites = "../../public/static/assets/sprites"
game_audio = "../../public/static/assets/audio"
game_backgrounds = "../../public/static/assets/backgrounds"
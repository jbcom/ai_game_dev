#!/usr/bin/env python3
"""A classic 2D space shooter with enemies, power-ups, and scrolling background - Generated by AI Game Dev System."""

Certainly! Below is a complete 2D space shooter game implemented in Pygame. The game includes a player spaceship, enemy waves, power-ups, collision detection, and a score system. The code is modular and includes comments to help you understand each part.

### Prerequisites
Make sure you have Python and Pygame installed. You can install Pygame using pip:

```bash
pip install pygame
```

### Game Code

```python
import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
FPS = 60

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Load resources
def load_image(path):
    try:
        return pygame.image.load(path).convert_alpha()
    except pygame.error as e:
        print(f"Unable to load image at {path}: {e}")
        sys.exit()

# Classes
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = load_image("player.png")  # Add your player image path
        self.rect = self.image.get_rect(center=(WIDTH // 2, HEIGHT - 50))
        self.speed = 5

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT] and self.rect.right < WIDTH:
            self.rect.x += self.speed

class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = load_image("enemy.png")  # Add your enemy image path
        self.rect = self.image.get_rect(center=(random.randint(0, WIDTH), 0))
        self.speed = random.randint(2, 5)

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > HEIGHT:
            self.kill()

class Bullet(pygame.sprite.Sprite):
    def __init__(self, pos):
        super().__init__()
        self.image = load_image("bullet.png")  # Add your bullet image path
        self.rect = self.image.get_rect(center=pos)
        self.speed = -10

    def update(self):
        self.rect.y += self.speed
        if self.rect.bottom < 0:
            self.kill()

class PowerUp(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = load_image("powerup.png")  # Add your powerup image path
        self.rect = self.image.get_rect(center=(random.randint(0, WIDTH), 0))
        self.speed = 3

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > HEIGHT:
            self.kill()

# Game functions
def main():
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Space Shooter")
    clock = pygame.time.Clock()

    all_sprites = pygame.sprite.Group()
    enemies = pygame.sprite.Group()
    bullets = pygame.sprite.Group()
    powerups = pygame.sprite.Group()

    player = Player()
    all_sprites.add(player)

    score = 0
    font = pygame.font.Font(None, 36)
    
    # Main game loop
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    bullet = Bullet(player.rect.center)
                    all_sprites.add(bullet)
                    bullets.add(bullet)

        # Spawn enemies and power-ups
        if random.random() < 0.02:
            enemy = Enemy()
            all_sprites.add(enemy)
            enemies.add(enemy)

        if random.random() < 0.01:
            powerup = PowerUp()
            all_sprites.add(powerup)
            powerups.add(powerup)

        # Update
        all_sprites.update()

        # Collision detection
        hits = pygame.sprite.groupcollide(enemies, bullets, True, True)
        for hit in hits:
            score += 100

        powerup_hits = pygame.sprite.spritecollide(player, powerups, True)
        for powerup in powerup_hits:
            score += 50

        # Draw
        screen.fill(BLACK)
        all_sprites.draw(screen)
        
        # Draw score
        score_text = font.render(f'Score: {score}', True, WHITE)
        screen.blit(score_text, (10, 10))

        pygame.display.flip()
        clock.tick(FPS)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
```

### Setup Instructions
1. **Images**: You need to provide images for the player, enemy, bullet, and powerup. For example:
   - `player.png`: The player's spaceship.
   - `enemy.png`: The enemy spaceship.
   - `bullet.png`: The bullet image.
   - `powerup.png`: The power-up image.

   Ensure these images are in the same directory as your Python script, or provide the correct paths.

2. **Run the Game**: Save the script as `space_shooter.py` and run it using Python:

   ```bash
   python space_shooter.py
   ```

3. **Controls**:
   - Use the left and right arrow keys to move the player spaceship.
   - Press the space bar to shoot bullets.

### Game Features
- **Player Spaceship**: Controlled by the player.
- **Enemy Waves**: Enemies spawn randomly and move downwards.
- **Power-ups**: Randomly spawn and give extra score on collection.
- **Collision Detection**: Between bullets and enemies, and player and power-ups.
- **Score System**: The score increases when enemies are destroyed or power-ups are collected.

This code provides a solid foundation for a space shooter game, and you can expand it with additional features such as levels, different enemy types, and more complex power-ups.
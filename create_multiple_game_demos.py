#!/usr/bin/env python3
"""Create multiple game demos showcasing different engines and genres."""

import asyncio
import os
from pathlib import Path
from ai_game_dev.providers import LLMProviderManager, LLMProvider
from ai_game_dev.models import GameSpec, GameType, ComplexityLevel, GameEngine

async def create_game_demos():
    """Create multiple game demos for different engines."""
    print("üéÆ Creating Multiple Game Demos...")
    
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå OPENAI_API_KEY required")
        return
    
    # Setup LLM provider
    manager = LLMProviderManager()
    provider = manager.add_provider(
        "demo_provider",
        LLMProvider.OPENAI,
        "gpt-4o-mini",
        temperature=0.7
    )
    
    # Define demo game specifications
    game_demos = [
        {
            "name": "space_shooter",
            "engine": "Pygame",
            "description": "A classic 2D space shooter with enemies, power-ups, and scrolling background",
            "features": ["Player spaceship", "Enemy waves", "Power-ups", "Collision detection", "Score system"]
        },
        {
            "name": "puzzle_platformer", 
            "engine": "Arcade",
            "description": "A puzzle-based platformer with switches, moving platforms, and collectibles",
            "features": ["Physics-based movement", "Interactive objects", "Level progression", "Collectible items"]
        },
        {
            "name": "tower_defense",
            "engine": "Pygame",
            "description": "A tower defense game with different tower types and enemy waves",
            "features": ["Multiple tower types", "Enemy pathfinding", "Upgrade system", "Wave management"]
        },
        {
            "name": "rpg_battle",
            "engine": "Bevy",
            "description": "A turn-based RPG battle system with characters, spells, and inventory",
            "features": ["Turn-based combat", "Character stats", "Spell system", "Inventory management"]
        }
    ]
    
    games_dir = Path("generated_games")
    games_dir.mkdir(exist_ok=True)
    
    for demo in game_demos:
        print(f"\nüöÄ Generating {demo['name']} using {demo['engine']}...")
        
        # Generate game code
        prompt = f"""Create a complete {demo['engine']} game for: {demo['description']}

Required features:
{chr(10).join(f'- {feature}' for feature in demo['features'])}

Generate clean, well-commented, production-ready code that:
1. Has a proper game loop
2. Includes all core mechanics
3. Is modular and extensible
4. Has proper error handling
5. Includes clear setup instructions

Make it a complete, playable game that demonstrates {demo['engine']} capabilities."""

        try:
            game_code = provider.invoke(prompt)
            
            # Save game code
            game_file = games_dir / f"{demo['name']}.py"
            with open(game_file, "w") as f:
                f.write(f"#!/usr/bin/env python3\n")
                f.write(f'"""{demo["description"]} - Generated by AI Game Dev System."""\n\n')
                f.write(game_code)
            
            print(f"‚úÖ Generated {demo['name']} -> {game_file}")
            
            # Generate README for the game
            readme_prompt = f"""Create a comprehensive README.md for the {demo['name']} game.

Include:
1. Game description and objectives
2. How to install dependencies
3. How to run the game
4. Controls and gameplay instructions
5. Technical architecture overview
6. Future enhancement ideas

Make it professional and user-friendly."""
            
            readme_content = provider.invoke(readme_prompt)
            readme_file = games_dir / f"{demo['name']}_README.md"
            
            with open(readme_file, "w") as f:
                f.write(readme_content)
            
            print(f"üìã Generated README -> {readme_file}")
            
        except Exception as e:
            print(f"‚ùå Error generating {demo['name']}: {e}")
    
    # Generate a master README
    master_readme = """# AI Game Dev System - Generated Games Collection

This directory contains games generated by the AI Game Dev System, demonstrating various engines and game types.

## Available Games

1. **space_shooter.py** - Classic 2D space shooter (Pygame)
2. **puzzle_platformer.py** - Puzzle-based platformer (Arcade)  
3. **tower_defense.py** - Tower defense strategy (Pygame)
4. **rpg_battle.py** - Turn-based RPG combat (Bevy)

## Running the Games

Each game includes its own README with specific instructions. Generally:

```bash
# Install dependencies
pip install pygame arcade bevy-python

# Run any game
python <game_name>.py
```

## About AI Game Dev System

These games were generated using our revolutionary AI-powered game development library featuring:
- Multi-LLM provider support (OpenAI, Anthropic, Google, Ollama)
- Engine-specific code generation
- Comprehensive asset creation
- Professional development tools

Generated on: {asyncio.get_event_loop().time()}
"""
    
    with open(games_dir / "README.md", "w") as f:
        f.write(master_readme)
    
    print(f"\nüéâ Generated {len(game_demos)} complete game demos!")
    print(f"üìÅ All games saved to: {games_dir}")

def main():
    """Main entry point."""
    asyncio.run(create_game_demos())

if __name__ == "__main__":
    main()